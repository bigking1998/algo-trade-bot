version: '3.8'

services:
  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: trading-bot-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - certbot_data:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
    networks:
      - trading-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot
    container_name: trading-bot-certbot-prod
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot_data:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}
    depends_on:
      - nginx

  # PostgreSQL with TimescaleDB for production
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: trading-bot-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
      TIMESCALEDB_TELEMETRY: 'off'
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/var/backups/postgresql
    networks:
      - trading-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"

  # Redis for production caching and session management
  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis-prod
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - trading-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  # Backend API service for production
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: trading-bot-backend-prod
    ports:
      - "127.0.0.1:3001:3001"  # Only bind to localhost, accessed via nginx
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=https://${DOMAIN}
      - LOG_LEVEL=info
      - MAX_CONNECTIONS=20
    volumes:
      - ./logs:/app/logs
      - ./database:/app/database
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-bot-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
      replicas: 2

  # Frontend React application for production
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        - VITE_API_BASE_URL=/api
    container_name: trading-bot-frontend-prod
    expose:
      - "80"  # Only exposed to internal network
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - trading-bot-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.5"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-bot-prometheus-prod
    ports:
      - "127.0.0.1:9090:9090"  # Only bind to localhost
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - trading-bot-network
    restart: unless-stopped
    
  # AlertManager for alert routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: trading-bot-alertmanager-prod
    ports:
      - "127.0.0.1:9093:9093"  # Only bind to localhost
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - trading-bot-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trading-bot-grafana-prod
    ports:
      - "127.0.0.1:3000:3000"  # Only bind to localhost
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - trading-bot-network
    restart: unless-stopped

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: trading-bot-loki-prod
    ports:
      - "127.0.0.1:3100:3100"  # Only bind to localhost
    volumes:
      - ./monitoring/loki.yml:/etc/loki/loki.yml:ro
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/loki.yml
    networks:
      - trading-bot-network
    restart: unless-stopped

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: trading-bot-backup-prod
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: |
      sh -c "
        while true; do
          echo 'Starting backup...'
          /backup.sh
          echo 'Backup completed. Sleeping for 24 hours...'
          sleep 86400
        done
      "
    depends_on:
      - postgres
    networks:
      - trading-bot-network
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  alertmanager_data:
    driver: local
  letsencrypt:
    driver: local
  certbot_data:
    driver: local

networks:
  trading-bot-network:
    driver: bridge
# ===========================================
# KUBERNETES PRODUCTION DEPLOYMENT
# DO-004: Infrastructure Scaling Configuration
# ===========================================

apiVersion: v1
kind: Namespace
metadata:
  name: trading-bot
  labels:
    name: trading-bot
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: trading-bot-config
  namespace: trading-bot
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  METRICS_ENABLED: "true"
  HEALTH_CHECK_INTERVAL: "30"
  MAX_WORKERS: "4"
  RATE_LIMIT_WINDOW: "900000"  # 15 minutes
  RATE_LIMIT_MAX: "1000"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: trading-bot-secrets
  namespace: trading-bot
type: Opaque
stringData:
  DATABASE_URL: "postgresql://user:password@postgres:5432/trading_bot"
  REDIS_URL: "redis://redis:6379"
  JWT_SECRET: "your-jwt-secret"
  API_KEYS: |
    {
      "dydx": "your-dydx-api-key",
      "binance": "your-binance-api-key"
    }
  ENCRYPTION_KEY: "your-encryption-key"

---
# Persistent Volume for logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: trading-bot-logs
  namespace: trading-bot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: ssd

---
# Backend Deployment with Auto-scaling
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-bot-backend
  namespace: trading-bot
  labels:
    app: trading-bot
    component: backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: trading-bot
      component: backend
  template:
    metadata:
      labels:
        app: trading-bot
        component: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9464"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - trading-bot
                - key: component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
      containers:
      - name: backend
        image: ghcr.io/your-org/trading-bot:latest
        ports:
        - containerPort: 3001
          name: http
        - containerPort: 9464
          name: metrics
        env:
        - name: PORT
          value: "3001"
        - name: METRICS_PORT
          value: "9464"
        envFrom:
        - configMapRef:
            name: trading-bot-config
        - secretRef:
            name: trading-bot-secrets
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 30
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: trading-bot-logs
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: trading-bot-backend-hpa
  namespace: trading-bot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: trading-bot-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30   # 30 seconds
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: trading-bot-backend-service
  namespace: trading-bot
  labels:
    app: trading-bot
    component: backend
spec:
  selector:
    app: trading-bot
    component: backend
  ports:
  - name: http
    port: 80
    targetPort: 3001
    protocol: TCP
  - name: metrics
    port: 9464
    targetPort: 9464
    protocol: TCP
  type: ClusterIP

---
# Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: trading-bot-loadbalancer
  namespace: trading-bot
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
spec:
  selector:
    app: trading-bot
    component: backend
  ports:
  - name: https
    port: 443
    targetPort: 3001
    protocol: TCP
  - name: http
    port: 80
    targetPort: 3001
    protocol: TCP
  type: LoadBalancer

---
# PostgreSQL Deployment with High Availability
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: trading-bot
spec:
  serviceName: postgres-primary
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      role: primary
  template:
    metadata:
      labels:
        app: postgres
        role: primary
    spec:
      containers:
      - name: postgres
        image: timescale/timescaledb:2.11.2-pg15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "trading_bot"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ssd
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Read Replica
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: trading-bot
spec:
  serviceName: postgres-replica
  replicas: 2
  selector:
    matchLabels:
      app: postgres
      role: replica
  template:
    metadata:
      labels:
        app: postgres
        role: replica
    spec:
      containers:
      - name: postgres
        image: timescale/timescaledb:2.11.2-pg15
        ports:
        - containerPort: 5432
        env:
        - name: PGUSER
          value: "replicator"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication-password
        - name: POSTGRES_PRIMARY_HOST
          value: "postgres-primary-0.postgres-primary.trading-bot.svc.cluster.local"
        - name: POSTGRES_PRIMARY_PORT
          value: "5432"
        command:
        - bash
        - -c
        - |
          pg_basebackup -h $POSTGRES_PRIMARY_HOST -D /var/lib/postgresql/data -U replicator -W -R -X stream
          echo "hot_standby = on" >> /var/lib/postgresql/data/postgresql.conf
          postgres
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "250m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ssd
      resources:
        requests:
          storage: 100Gi

---
# Redis Cluster
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: trading-bot
spec:
  serviceName: redis-cluster
  replicas: 6
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        - containerPort: 16379
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --cluster-enabled
        - "yes"
        - --cluster-config-file
        - nodes.conf
        - --cluster-node-timeout
        - "5000"
        - --appendonly
        - "yes"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ssd
      resources:
        requests:
          storage: 10Gi

---
# Pod Disruption Budget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: trading-bot-backend-pdb
  namespace: trading-bot
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: trading-bot
      component: backend

---
# Pod Disruption Budget for Database
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-primary-pdb
  namespace: trading-bot
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: postgres
      role: primary

---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: trading-bot-network-policy
  namespace: trading-bot
spec:
  podSelector:
    matchLabels:
      app: trading-bot
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: trading-bot
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
  - to:
    - podSelector:
        matchLabels:
          app: postgres
  - to:
    - podSelector:
        matchLabels:
          app: redis
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Resource Quota
apiVersion: v1
kind: ResourceQuota
metadata:
  name: trading-bot-quota
  namespace: trading-bot
spec:
  hard:
    requests.cpu: "10"
    requests.memory: 20Gi
    limits.cpu: "20"
    limits.memory: 40Gi
    persistentvolumeclaims: "10"
    pods: "50"

---
# Limit Range
apiVersion: v1
kind: LimitRange
metadata:
  name: trading-bot-limits
  namespace: trading-bot
spec:
  limits:
  - default:
      cpu: "500m"
      memory: "1Gi"
    defaultRequest:
      cpu: "100m"
      memory: "256Mi"
    type: Container
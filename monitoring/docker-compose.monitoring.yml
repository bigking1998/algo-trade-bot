version: '3.8'

networks:
  monitoring:
    driver: bridge
  trading-app:
    external: true

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local

services:
  # ===========================================
  # PROMETHEUS - METRICS COLLECTION
  # ===========================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - monitoring
      - trading-app
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules/:/etc/prometheus/rules/:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--query.max-samples=50000000'
    labels:
      - "monitoring=prometheus"
    healthcheck:
      test: ["CMD", "promtool", "query", "instant", "http://localhost:9090", "up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # GRAFANA - VISUALIZATION PLATFORM
  # ===========================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - monitoring
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123!@#
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-clock-panel,grafana-piechart-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=${SMTP_USER:-alerts@tradingbot.com}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD:-your_password}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM:-alerts@tradingbot.com}
      - GF_SMTP_FROM_NAME="Trading Bot Alerts"
    labels:
      - "monitoring=grafana"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # ALERTMANAGER - ALERT MANAGEMENT
  # ===========================================
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: trading-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    networks:
      - monitoring
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
    labels:
      - "monitoring=alertmanager"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # LOKI - LOG AGGREGATION
  # ===========================================
  loki:
    image: grafana/loki:2.8.0
    container_name: trading-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    networks:
      - monitoring
      - trading-app
    volumes:
      - ./loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    labels:
      - "monitoring=loki"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # PROMTAIL - LOG SHIPPER
  # ===========================================
  promtail:
    image: grafana/promtail:2.8.0
    container_name: trading-promtail
    restart: unless-stopped
    networks:
      - monitoring
      - trading-app
    volumes:
      - ./promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    labels:
      - "monitoring=promtail"

  # ===========================================
  # NODE EXPORTER - SYSTEM METRICS
  # ===========================================
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: trading-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - monitoring
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.textfile.directory=/var/lib/node-exporter/textfile'
      - '--collector.systemd'
      - '--collector.processes'
    labels:
      - "monitoring=node-exporter"

  # ===========================================
  # CADVISOR - CONTAINER METRICS
  # ===========================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: trading-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - monitoring
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    labels:
      - "monitoring=cadvisor"

  # ===========================================
  # POSTGRES EXPORTER - DATABASE METRICS
  # ===========================================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: trading-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    networks:
      - monitoring
      - trading-app
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-trading_bot}?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres-exporter/queries.yaml
    volumes:
      - ./postgres-exporter/queries.yaml:/etc/postgres-exporter/queries.yaml:ro
    labels:
      - "monitoring=postgres-exporter"

  # ===========================================
  # REDIS EXPORTER - CACHE METRICS
  # ===========================================
  redis-exporter:
    image: oliver006/redis_exporter:v1.51.0
    container_name: trading-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    networks:
      - monitoring
      - trading-app
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_USER=${REDIS_USER:-}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command:
      - '--redis.addr=redis://redis:6379'
      - '--export-client-list=true'
      - '--export-client-port=true'
    labels:
      - "monitoring=redis-exporter"

  # ===========================================
  # BLACKBOX EXPORTER - ENDPOINT MONITORING
  # ===========================================
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: trading-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    networks:
      - monitoring
      - trading-app
    volumes:
      - ./blackbox/blackbox.yml:/etc/blackbox-exporter/config.yml:ro
    command:
      - '--config.file=/etc/blackbox-exporter/config.yml'
    labels:
      - "monitoring=blackbox-exporter"

  # ===========================================
  # GRAFANA IMAGE RENDERER
  # ===========================================
  renderer:
    image: grafana/grafana-image-renderer:3.7.0
    container_name: trading-grafana-renderer
    restart: unless-stopped
    ports:
      - "8081:8081"
    networks:
      - monitoring
    environment:
      - ENABLE_METRICS=true
      - HTTP_HOST=0.0.0.0
    labels:
      - "monitoring=renderer"

  # ===========================================
  # JAEGER - DISTRIBUTED TRACING
  # ===========================================
  jaeger:
    image: jaegertracing/all-in-one:1.46.0
    container_name: trading-jaeger
    restart: unless-stopped
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - monitoring
      - trading-app
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    labels:
      - "monitoring=jaeger"

  # ===========================================
  # ELASTICSEARCH - LOG STORAGE (ALTERNATIVE)
  # ===========================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: trading-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - monitoring
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    labels:
      - "monitoring=elasticsearch"
    profiles:
      - elk  # Only start with specific profile

  # ===========================================
  # KIBANA - LOG VISUALIZATION (ALTERNATIVE)
  # ===========================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: trading-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    networks:
      - monitoring
    volumes:
      - kibana_data:/usr/share/kibana/data
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    labels:
      - "monitoring=kibana"
    profiles:
      - elk  # Only start with specific profile

  # ===========================================
  # UPTIME KUMA - SERVICE UPTIME MONITORING
  # ===========================================
  uptime-kuma:
    image: louislam/uptime-kuma:1.21.3
    container_name: trading-uptime-kuma
    restart: unless-stopped
    ports:
      - "3001:3001"
    networks:
      - monitoring
      - trading-app
    volumes:
      - ./uptime-kuma:/app/data
    labels:
      - "monitoring=uptime-kuma"

  # ===========================================
  # PORTAINER - CONTAINER MANAGEMENT
  # ===========================================
  portainer:
    image: portainer/portainer-ce:2.18.3
    container_name: trading-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    networks:
      - monitoring
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer:/data
    labels:
      - "monitoring=portainer"

  # ===========================================
  # WATCHTOWER - AUTOMATED UPDATES
  # ===========================================
  watchtower:
    image: containrrr/watchtower:1.5.3
    container_name: trading-watchtower
    restart: unless-stopped
    networks:
      - monitoring
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_NOTIFICATIONS=slack
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL:-}
    labels:
      - "monitoring=watchtower"
    profiles:
      - autoupdate  # Only start with specific profile
